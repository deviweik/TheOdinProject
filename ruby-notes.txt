Syntax
  tab - 2 spaces

  comments - `# this is a comment`

  always use snake_case for variables, methods, and files

  Use PascalCase (camelCase with first word capitalized as well) for 
  declaring class names

  Constant variables - all caps 
    FOUR = 'four'
    FIVE = 5

  Tips on reading documentation pages:
    https://launchschool.com/books/ruby/read/preparations#usingacodeeditor
  
Data Types
  Numbers 
    Operators
      +, -, *, /, modulus: %, exponent: **

    Number Types
      Integers: whole Numbers
        arithmetic with integers will always result in an integer
      Floats: decimals

      Converting Number Types
        # To convert an integer to a float:
        13.to_f   #=> 13.0

        # To convert a float to an integer:
        13.0.to_i #=> 13
        13.9.to_i #=> 13
        # As shown here, it will simply cut off the decimal, no rounding
      
    Number Methods 
      #even? and #odd?
        6.even? # => true
        6.odd? # => false
    
  Strings
    Syntax
      Like JS, can use single or double quotation marks
      Difference: string interpolation and escape characters will only work
      inside double quotation marks

    Concatenation
      # With the plus operator:
      "Welcome " + "to " + "Odin!"    #=> "Welcome to Odin!"

      # With the shovel operator:
      "Welcome " << "to " << "Odin!"  #=> "Welcome to Odin!"

      # With the concat method:
      "Welcome ".concat("to ").concat("Odin!")  #=> "Welcome to Odin!"

    Substrings
      "hello"[0]      #=> "h"

      "hello"[0..1]   #=> "he"

      "hello"[0, 4]   #=> "hell"

      "hello"[-1]     #=> "o"

    Escape Characters 
      \\  #=> Need a backslash in your string?
      \b  #=> Backspace
      \r  #=> Carriage return, for those of you that love typewriters
      \n  #=> Newline. You'll likely use this one the most.
      \s  #=> Space
      \t  #=> Tab
      \"  #=> Double quotation mark
      \'  #=> Single quotation mark

    Interpolation - evaluating strings with placeholder variables
      name = "Odin"

      puts "Hello, #{name}" #=> "Hello, Odin"
      puts 'Hello, #{name}' #=> "Hello, #{name}"

    String Methods
      #capitalize
        "hello".capitalize #=> "Hello"

      #include?
        "hello".include?("lo")  #=> true

        "hello".include?("z")   #=> false
      
      #upcase
        "hello".upcase  #=> "HELLO"

      #downcase
        "Hello".downcase  #=> "hello"

      #empty?
        "hello".empty?  #=> false

        "".empty?       #=> true

      #length
        "hello".length  #=> 5

      #reverse
        "hello".reverse  #=> "olleh"

      #split
        "hello world".split  #=> ["hello", "world"]

        "hello".split("")    #=> ["h", "e", "l", "l", "o"]

      #strip
        " hello, world   ".strip  #=> "hello, world"

      These are only a few examples, here are some more to show the 
      possibilities with ruby:
        "he77o".sub("7", "l")           #=> "hel7o"

        "he77o".gsub("7", "l")          #=> "hello"

        "hello".insert(-1, " dude")     #=> "hello dude"

        "hello world".delete("l")       #=> "heo word"

        "!".prepend("hello, ", "world") #=> "hello, world!"

    Converting other objects to strings
      5.to_s        #=> "5"

      nil.to_s      #=> ""

      :symbol.to_s  #=> "symbol"
  
  Symbols
    Basically, strings are data types that store a collection of characters 
    that can be changed. So every time a string is used, Ruby has to store
    it in memory, even if that same string has already been stored 
    somewhere else. Symbols differ from strings in that they are only 
    stored in memory once, which can greatly increase performance in some
    cases. 
    
    Here is some code displaying this difference:
      "string" == "string"  #=> true

      "string".object_id == "string".object_id  #=> false

      :symbol.object_id == :symbol.object_id    #=> true

    An example of where symbols are preferred is for keys in hashes.

    Symbols are created by putting a colon at the beginning of some text:
      `:my_symbol`

  Booleans
    True and False 
      these are true and false, very standard

    Nil 
      In Ruby, nil = nothing

      Everything in Ruby will have a return value, so when any code has
      nothing to return, it will return `nil`.

  
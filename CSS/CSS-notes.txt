
Selectors
    Universal Selector
        * { property: value;}
        selects elements of any type

    Type Selectors
        ex:
        div {property: value;}
        This would update property to value for all div elements, and not
        affect other elements (headers, paragraphs, other)

    Class Selectors
        Classes are attributes that can be added to elements:
        <element class="class">
            content
        </element>

        This element and all others with the same class attribute can be
        selected by referencing the class with a period like this:
        .class {
            property: value;
        }

        You can add multiple classes by separating with spaces:
        <element class="class-1 class-2">

    ID Selectors
        IDs are similar to classes, with the major difference being that
        an id is meant to identify a unique element and can only be used
        once in the same document. So it will be a faster but more
        limited selection. Also elements can only have one id.
        <element id="id-title">Content</element>

        This is selected similar to classes, but with a #:
        #id-title {
            property: value;
        }

    Grouping Selectors
        If you are implementing the same property changes for multiple
        classes you can select them with a comma-separated list:
        .class-1, .class-2 {
            property: value;
            property2: value;
        }

    Chaining Selectors
        You can also select elements that have multiple classes by 
        listing class names like this:
        .class-1.class-2 {
            property: value;
        }
        This would select any elements that have both class-1 and
        class-2 as attributes.

        You can also chain classes and an id:
        .class-1#id-title {
            property: value;
        }
        This would select the element with id "id-title" if it also has
        class "class-1".

        Type selectors (div, p, h1, etc.) can't be chained since an 
        element can't be multiple types at once.

    Descendant Combinator
        Combinators allow you to combine selectors based on the 
        relationship between the selectors. The four types of combinators 
        in CSS are the descendant selector ( ), the child selector ( > ), 
        the adjacent sibling selector ( + ) and the general sibling 
        selector ( ~ )

        The descendant combinator will only allow matches for the last
        selector if they also have an ancestor (parent, grandparent, etc.)
        that matches the previous selector. The ancestor relationship
        comes from being nested inside other elements with that class.

        Ex:
        <div class="ancestor">              <!-- A -->
            <div class="contents">          <!-- B -->
                <div class="contents">      <!-- C -->
                </div>
            </div>
        </div>

        <div class="contents"></div>        <!-- D -->

        If you use a descendant combinator like so:
        .ancestor .contents{
            property: value;
        }
        This will change property to value for B and C, without affecting
        A or D.
        
        You can nest as many levels deep as you'd like, but high 
        levels (4+) of nesting lead to overly complicated selectors

Properties
    Color and Background-Color
        Accepted values
            - colors like "red", "transparent" (140 color names)
            - HEX codes ex:     color: #ffffff;
                - Hex codes with transparency (add two digits)
            - RGB ex:           color: rgb(100, 10, 150);
                - RGBA (adds opacity)
            - HSL ex:           color: hsl(15, 82%, 56%);
                - HSLA (adds opacity)
            - "currentcolor" keyword: refers to color value of element

    Typography Basics and Text-Align
        - font-family
            Takes a single value or comma-separated list of values. 
            Fonts fall into two categories:
            - font family name like "Times New Roman" (in quotes to
            include spaces)
            - generic family name like sans-serif
            If the browser cannot find a specific font it will move to
            the next in the list. That is why it is best practice to list
            fonts in font-family in order of preference and always end
            with a generic font family.
            ex: font-family: "Times New Roman", sans-serif;
        - font-size
            - ex: font-size: 22px;
        - font-weight
            - ex: font-weight: bold;
            - ex: font-weight: 700; (same as bold)
            Values for bold typically go up in 100 increments from 100-900.
        - text-align
            - ex: text-align: center

    Image Height and Width 
        ex:
        img {
            height: auto;
            width: 250px;
        }
        This would change the size of the image without distoring it.
        Assigning values to both height and width will likely distort
        the image unless you calculate these values based on the 
        dimensions of the original image.

        It is best practice to inclue both properties even if you don't 
        plan on adjusting from the original image size.

The Cascade
    Understanding the cascade is key to making sure your rules are 
    applied as you intend. It is also important to understand the 
    default styles and where this may be leading to unintentional 
    appearences.

    Specificity
        Some CSS declarations take precendence over others based on their
        specificity. Inline styles have the highest specificity compared 
        to any selector.

        The specificity of the selectors mentioned in this lesson:
            1. id selectors (most specific selector of all) 
            2. Class selectors
            3. Type selectors
            There are other selectors not included here.

        Specificity only comes into consideration when elements have
        multiple, conflicting declarations. If multiple declarations
        of the same specificity level are used, preference will be 
        given to the declaration with more selectors involved. 
        ex: 
        <div class="main">
            <div class="list subsection"></div>
        </div>

        .subsection {
            color: blue;
        }
        .main .list {
            color: red;
        }
        In this case, the element will be red since this declaration 
        is more specific as it uses more class selectors. If you changed
        .subsection to #subsection, this would lead to blue being chosen
        over red since id's are more specific than any number of classes.

        Also, declarations with no conflictions that are under the same
        selectors as conflicting declarations with lower specificity 
        selectors will still be applied.

        Chaining vs using combinators to combine selectors does not 
        change specificity, it will still depend on the number of 
        selectors.

        Universal selectors (*) have no specificity value.

    Inheritance
        Some properties are inherited by decendants (nested elements) 
        when they are applied to a parent element. Typography based 
        properties (color, font-size, font-family, etc.) are usually 
        inherited, while most other properties arenâ€™t.

        Direct declarations will always take precendence over inherited 
        properties regardless of the specificity of the ancestor.

    Rule Order 
        Whenever declarations are tied based on all of the other 
        evaluation factors, the winning declaration is decided based on
        which one was defined last.

Adding CSS to HTML 
    External CSS
        This is the most common of the three methods. This method involves
        creating a separate file for the CSS and linking in the HTML's
        <head> tag with a self closing <link> element.

        syntax:
        <head>
            <link rel="stylesheet" href="styles.css">
        </head>
        Notes: rel attribute is required

        This method is popular because it allows you to keep your HTML 
        code shorter and simpler. It is also helpful for websites with 
        multiple webpages using the same styling, since you can use 
        the same CSS file for multiple HTML pages.
    
    Internal CSS
        All CSS is added between opening and closing <style> tags inside 
        the <head> tags. This method is similar to having a separate
        CSS file if you are only working on one webpage, but if you have
        many webpages with similar design it is very inefficient to 
        copy the <style> section into every HTML file.

    Inline CSS
        ex:
        <body>
            <div style="color: white; background-color: black;">
                content
            </div>
        </body>

        The style attribute allows you to add CSS directly to the element
        which foregoes the need for selectors. This is good if one single
        element needs unique styling, but has many drawbacks for 
        consistent usage. 

        This method gets very messy when many declarations are needed for
        each element. It would be tons of copying and pasting for elements
        with the same styling. Also, Inline CSS will override the other 
        two CSS methods which can lead to unexpected results.

Spacing
    Margins, Padding, Borders
        margin: (vertical) (horizontal); (margin: top right bottom left;)
            Margin is the space between the outside of the border and 
            nearby elements or edges.

            ex. margin: 20px 10px; will add 20 pixels of space between 
            elements vertically and 10 pixels of space between 
            elements horizontally)

            You can center elements by using margin: auto; 
            (or margin: 0 auto;)

        padding: (vertical) (horizontal); (padding: top right bottom left)
            Padding is the space between the content inside a container 
            and the border.

            ex. padding: 20px 10px; will add 20 pixels of vertical space 
            between the content inside the container and the border and 
            10 pixels of horizontal space between content and the border)

            'auto' cannot be used for padding.
        
        border: width style color;
            Border defines the border around the element.

            Width can be a pixel/em value or a keyword like 'thin', 
            'medium', or 'thick'.

            Style will usually default to 'solid' and can be defined as
            keywords like 'dotted', 'dashed', 'double', 'groove', 
            'ridge', 'inset', 'outset', and 'none'.

            Color can be set as a named color, hex code, rgb code, etc.

            You can also define specifc borders using 'border-top:',
            'border-bottom', 'border-right', 'border-left'. You can go
            even further and individually define the width, style, and
            color of borders like 'border-top-style: dotted;'.

            border-radius: 2px; can create rounded borders.
    
    Display types
        The display property is used to specify the layout format for
        HTML elements.

        Block
            Takes up the full width of its parent element (meaning it
            will move to a new line from other content inside its parent
            element).

            Examples: div, h1-h6, p, form, header, footer, section, etc.

            Block elements will respect height/width properties.

        Inline 
            Only takes up as much width as necessary and does not create
            a new line.

            Examples: a, span, em, strong, img, input, etc.

            Inline elements will not respect height/width properties.

            Also, padding/margins for inline elements will only apply to
            the top and bottom, not the left and right sides.

        Inline-Block
            Inline-block elements are treated as inline elements but they
            will respect height/width properties and can have 
            padding/margins applied. 

            With no width defined, it will only take as much space as 
            necessary for its content and will not create a new line.

            Useful when you want elements to sit side by side but also
            need to control their dimensions/position.

    Flexbox
        Flexbox is a layout mode designed to make it easier to align and
        distribute items along main axes. It makes it much easier to 
        construct complex layouts that let you fill content exactly
        where you need it.

        Flex Containers are parent elements with display: flex; or
        display: inline-flex;.

        Flex Items are the direct children of these elements. A flex
        item can also be a flex parent.

        Flex containers have two axes: main axis and cross axis.
            The main axis runs along the direction of the container.
            The cross axis runs perpendicular to the main.

            You can change the main axis to the vertical direction by 
            setting flex-direction: column; (other values are row, 
            row-reverse, and column-reverse) 

        Main Properties
            Flex Shorthand - 'flex: 1;' is shorthand for defining three
                properties: 'flex-grow', 'flex-shrink', and 'flex-basis'.
                flex: 1; really means flex: 1 1 0;

            flex-grow: takes a single number that represents the growth
                factor. If one of three components is defined with 
                flex-grow: 2 (and the others have 1), this component will
                grow 2x the size of the others. Essentially lets you set
                a width ratio between components.

                Although, if the first flex item is defined with 
                flex-grow: 1; and the others are set to 0, the first 
                component will take up all of the extra space not taken by
                the content/width of the other elements.

            flex-shrink: similar to flex-grow, but sets a shrink factor.
                You can prevent a flex item from shrinking smaller than
                its defined width by setting flex-shrink: 0;. This 
                property will only end up being applied if the size of all
                flex items is larger than their flex container.

                The best way to think about this is to consider the 
                deficit created by shrinking a container smaller than the
                width of the content. If you have 500px worth of content,
                and a 400px wide container, the flex-shrink values of the
                flex items create a ratio for where that extra space is 
                cut from. By default it's set to 1, so if there's three 
                flex items they will each lose 1/3 of the deficit. If you
                set one of the flex items to flex-shrink:2, that item 
                would lose 50px, and the others would lose 25px.
            
            flex-basis: sets the initial size of the flex item so that any
                shrinking or growing happens. Shorthand defaults to 
                flex-basis: 0%. If you need the flex-items to check for a
                width declaration, you can define flex-basis: auto;.

                The actual default for flex-basis is 'auto', flex: 1 will
                set flex-basis: 0;. flex: auto is shorthand for setting
                flex: 1 1 auto;

                To put it simply: In a Flex row, flex-basis does the same
                thing as width. In a Flex column, flex-basis does the 
                same thing as height. Width/height are not capable of 
                changing axes the same way flex items/containers can, so 
                flex-basis was created as a way to set this for flexbox.

                Flex-basis is not a direct replacement for width/height,
                but it acts very similarly for flexbox.

                flex-grow controls how the extra space is distributed when
                the items are smaller than their container.
                flex-shrink controls how space is removed when the items
                are bigger than their container.
                This means only one can be active at a time, if there is 
                extra space, there is no need to shrink, if there's not 
                enough space, there's no need to grow.

            *** Default for flex-items is flex: 0 1 auto; ***

            min-width: auto or 0px or _px; By default, min-width is set to
            auto. Text inputs have a default minimum size of 170-200px. 
            Elements containing text have a minimum size of the length of
            the longest unbreakable string of characters. (min-height
            exists as well for flex columns).

            Other shorthand presets:
                flex: initial; sets flex: 0 1 auto; Makes the flex item 
                inflexible when there is positive free space, but allows
                it to shrink to its minimum size when there is 
                insufficient space.
                
                flex: auto; sets flex: 1 1 auto; 

                flex: none; sets flex: 0 0 auto; Sizes the flex item based
                on its width/height and makes the item fully inflexible. 
                Similar to initial except no shrinking is permitted.

                flex: <positive-number>; sets flex: <positive-number> 1 0;

            You can also set 'min-width' and 'min-height' to allow flex 
            items to shrink below the minimum content size.

        Other Properties
            flex-direction: column; (defined above)
            justify-content: can be used to align items, inputs are 
                'center', 'flex-start', 'flex-end', 'space-between', and
                'space-around'.
            align-items: can be used to align on cross axis, inputs are
                'stretch', 'center', 'flex-start', 'flex-end', and 
                'baseline'.
            flex-wrap: controls whether items are forced onto a single 
                line or wrapped onto multiple.

            You can do some very interesting things by combining 
            flex-wrap, align-items, and align-content. When flex items are
            wrapped onto separate rows, they essentially create individual
            flexbox environments on each row that can be affected by 
            align-items and align-content for interesting results.
        
        Common use:
            .parent {
                display: flex;
                justify-content: space-between;
            }

            In this case, weâ€™re aligning the child items side-by-side and
            then spacing them equally between each other.

        Different way to think about flex properties:
            .child {
                flex: [max] [min] [ideal size];
            }
        
        Axes 
            Default direction for a flex container is horizontal, but you
            can change the direction to vertical using 
            flex-direction: column;

            Flex containers have 2 axes: main axis and cross axis
            When you change the flex-direction, you are changing the 
            direction of these axes.

            Remember that flex shorthands may act differently when the 
            main axis is changed to vertical. If there is no content in
            the flex items and flex-basis = 0, the divs will collaspe
            since no space is required to fill the container. Setting 
            flex-basis = auto or flex: auto will fix this. You could 
            also have fixed it by putting a height on the parent 
            .flex-container, or by using flex-grow: 1 instead of the 
            shorthand

            General understanding:
                Flex items are laid out from start to end on the primary
                axis, and by default will only take up as much space on 
                this axis as their content demands. By default, the start 
                and end of the cross axis is less important because items
                are set to take up the full space from start to finish.

        Alignment 
            justify-content is used for spacing on the primary axis, 
            align-content is used for spacing on the cross axis.

            justify-content: space-between; This will make flex items
            respect their given width and equally space themselves 
            within the container.

            justify-content: center; This will make flex items respect 
            their given width and center themselves in the container with
            equal space on either side.

            justify-content: flex-end; This will reverse the start and end
            of the primary axis. (flex-start is default, this is the 
            opposite)

            justify-content: space-around; This is similar to 
            space-between but it will also leave space between the edges.
            The amount of space between edges and 

            justify-content: space-evenly; An extension of the previous
            properties but makes the spacing between edges the same as
            the space between flex items.            

            align-items: stetch; This is the default setting and will make
            flex items take up the whole cross axis.

            align-items: flex-start; This will make flex items only take
            up the space they need to contain their content on the cross
            axis.

            align-items: flex-end; Same as flex-start but reverses the 
            direction of the cross axis.

            align-items: center; This will center flex items on the cross 
            axis. 

            align-items: baseline; This is very similar to flex-start 
            except all flex items will line up with the item that 
            requires the most space to contain it's content. So the 
            edges of the flex items that are further down on the cross
            axis will form a "baseline", with space left above the items
            the the least space required for content.

            Keep in mind that these properties affect the main and cross
            axes, respectfully. If you change flex-direction to column, 
            justify-content will affect items on the vertical axis and
            align-content will affect items on the horizontal axis.

            align-self is used on child elements to change individual
            allignments of flex items along the cross axis.

            The properties are the exact same as align-items, 
            e.g. stretch, flex-start, flex-end, center, baseline.

            justify-self does not exist. 

            The most commonly used are justify-content and 
            align-items.

            gap: 10px; This will create an equal gap of 10px between 
            flex items.

            margin-left and margin-right are other useful tools with the
            flexbox layout. Both values are 0px by default. You can 
            specify the margin in pixels or use auto. Setting 
            margin-right: auto; for the first flex item in the row/col 
            will have that item start from the left edge and push the 
            rest of the flex items to the right edge. Setting 
            margin-left: auto; will have all flex items start from the 
            right edge.
            
        Hypothetical Size
            This refers to the size that an element would be, before being
            affected by the layout mode. If you have two items, and set 
            both to have a width of 2000 px, but one item is in the 
            standard flow layout and the other is using Flexbox, the item
            using flow layout will actually extend to 2000px even if it
            runs off the page. The Flexbox item, however, will be 
            constrained by the width of its parent container. So 2000px
            becomes its 'hypothetical size'.

    